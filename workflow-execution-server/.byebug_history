continue
ENV['HOSTNAME']
ENV['$HOSTNAME']
ap(printf(result))
continue
ap(printf(result))
printf result
ap result
app result
pa result
continue
next
continue
reload!
continue
response
next
continue
response
continue
response
continue
response
continue
response
continue
container.start!.streaming_logs(stdout: true, stderr: true)
container.streaming_logs(stdout: true, stderr: true)
container.wait
continue
response
continue
container
container.info
container
continue
response
reponse
continue
response
continue
response
continue
up
next
continue
activity_instance.container.container
activity_instance.container.container.logs stdout: true
container.logs stdout: true
continue
activity_instance.container.container.logs
continue
activity_instance.container.container.run 'ls'
activity_instance.container.container.run 'ruby /activity/run.rb'
activity_instance.container.container.start!
continue
activity_instance.container.container
continue
reload!
activity_instance.container.container
continue
activity_instance.container.container
continue
reload!
activity_instance.container.container
continue
activity_instance.container.container
continue
activity_instance.container.container
continue
activity_instance.container.container
continue
display activity_instance.container.container.json
activity_instance.container.container.json
activity_instance.container.container.start
activity_instance.container.container
activity_instance.container
continue
ApplicationHelper.testweise
ApplicationHelper
testweise
continue
Docker::Container.all(all: true)
Docker::Container.all
Docker::Container.all(status: 'running')
Docker.Container.all(status: 'running')
Docker.Container.running
continue
Docker::Image.all.collect {|image| image.info['RepoTags'].last}
Docker::Image.all.collect {|image| image.info['RepoTags']}
Docker::Image.all.collect {|image| image.info}
Docker::Image.all.collect(&:info)
Docker::Image.all
images.collect { |image| image.info}
continue
images.first.info
images.first.infos
images.first.id
images.first.image
images.first.json
images.first
y images.first
images.first
images.collect &->(ima{ image.name }
images.collect &->(image){ image }
images.collect &->(image){ image.info['RepoTags'].last }
images.collect &->(image){ image.info['RepoTags'] }
images.collect &->(image){ image.info.RepoTags }
images.collect ->(image){ image.info.RepoTags }
##images.collect {
#images.collect {}
images
continue
image
next
continue
image
next
image
next
"wfms_#{activity}"
Docker::Image.exist? "wfms_#{activity}"
exit
continue
Docker::Image.get("#{registry}/wfms_#{activity}:latest")
Docker::Image.create(fromImage: "#{registry}/wfms_#{activity}:latest")
"#{registry}/wfms_#{activity}:latest
